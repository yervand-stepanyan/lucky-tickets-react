{"version":3,"sources":["Components/Input/Input.js","Components/LuckyTickets/LuckyTickets.js","serviceWorker.js","index.js"],"names":["Input","onInputChange","event","props","target","value","onEnter","e","key","onInputClick","className","TextField","id","label","variant","onChange","this","onKeyDown","React","Component","VARIABLES","LuckyTickets","ticketNumLength","setState","onRadioChange","radioValue","checkTickets","luckyTicketsCount","error","getLuckyTickets","state","n","ticketNumStr","generateTicketNumber","initialNumber","lastNumber","generateLastNumber","i","numAsStr","ticketNumToCheck","length","k","j","firstPartStr","slice","secondPartStr","split","reduce","acc","next","Number","ticketNum","lastNum","handleSubmit","handleSubmitOnEnterKey","Typography","align","color","FormControl","component","RadioGroup","aria-label","name","FormControlLabel","control","Radio","labelPlacement","Button","size","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83a19ac1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './input.css';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default class Input extends React.Component {\r\n  onInputChange = event => {\r\n    this.props.onInputChange(event.target.value);\r\n  };\r\n\r\n  onEnter = e => {\r\n    if (e.key === 'Enter') {\r\n      this.props.onInputClick();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inputMainDiv\">\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Ticket Number Length\"\r\n          variant=\"outlined\"\r\n          onChange={this.onInputChange}\r\n          onKeyDown={e => this.onEnter(e)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './luckyTickets.css';\r\nimport Input from '../Input/Input';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nconst VARIABLES = {\r\n  title: 'Enter the length of the Ticket Number!',\r\n  radio1: 'All 0 not included',\r\n  radio2: 'All 0 included'\r\n};\r\n\r\nexport default class LuckyTickets extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ticketNumLength: 0,\r\n      radioValue: VARIABLES.radio1,\r\n      luckyTicketsCount: 0,\r\n      error: ''\r\n    };\r\n  }\r\n\r\n  onInputChange = ticketNumLength => {\r\n    this.setState({ ticketNumLength });\r\n  };\r\n\r\n  onRadioChange = event => {\r\n    this.setState({ radioValue: event.target.value });\r\n  };\r\n\r\n  checkTickets = () => {\r\n    this.setState({ luckyTicketsCount: 0, error: '' });\r\n\r\n    this.getLuckyTickets(this.state.ticketNumLength);\r\n  };\r\n\r\n  getLuckyTickets = n => {\r\n    if (n % 2 !== 0) {\r\n      this.setState({\r\n        error: `Invalid argument!!! \"n\" should be even, \"${n}\" is odd!`\r\n      });\r\n    } else if (n <= 0 || n > 100) {\r\n      this.setState({\r\n        error: `Invalid argument!!! \"n\" should be between 2 and 100!`\r\n      });\r\n    } else {\r\n      const ticketNumStr = this.generateTicketNumber(n);\r\n\r\n      const initialNumber = +ticketNumStr;\r\n\r\n      const lastNumber = this.generateLastNumber(n);\r\n\r\n      for (let i = initialNumber; i <= lastNumber; i++) {\r\n        const numAsStr = '' + i;\r\n        let ticketNumToCheck = '';\r\n\r\n        if (ticketNumStr.length > numAsStr.length) {\r\n          for (let k = 0; k < ticketNumStr.length - numAsStr.length; k++) {\r\n            ticketNumToCheck += 0;\r\n          }\r\n        }\r\n\r\n        for (let j = 0; j < numAsStr.length; j++) {\r\n          ticketNumToCheck += numAsStr[j];\r\n        }\r\n\r\n        const firstPartStr = ticketNumToCheck.slice(0, n / 2);\r\n        const secondPartStr = ticketNumToCheck.slice(n / 2);\r\n\r\n        const firstPartSum = firstPartStr\r\n          .split('')\r\n          .reduce((acc, next) => acc + Number(next), 0);\r\n        const secondPartSum = secondPartStr\r\n          .split('')\r\n          .reduce((acc, next) => acc + Number(next), 0);\r\n\r\n        if (firstPartSum === secondPartSum) {\r\n          this.setState(state => ({\r\n            luckyTicketsCount: state.luckyTicketsCount + 1\r\n          }));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  generateTicketNumber = n => {\r\n    let ticketNum = '';\r\n\r\n    if (this.state.radioValue === VARIABLES.radio1) {\r\n      for (let i = 0; i < n; i++) {\r\n        if (i === n / 2 - 1 || i === n - 1) {\r\n          ticketNum += 1;\r\n        } else {\r\n          ticketNum += 0;\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < n; i++) {\r\n        ticketNum += 0;\r\n      }\r\n    }\r\n\r\n    return ticketNum;\r\n  };\r\n\r\n  generateLastNumber = n => {\r\n    let lastNum = '';\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      lastNum += 9;\r\n    }\r\n\r\n    return Number(lastNum);\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    this.checkTickets();\r\n  };\r\n\r\n  handleSubmitOnEnterKey = () => {\r\n    this.checkTickets();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      radioValue,\r\n      ticketNumLength,\r\n      luckyTicketsCount,\r\n      error\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"mainDiv\">\r\n        <div className=\"title\">\r\n          <Typography align=\"center\" color=\"primary\" variant=\"h4\">\r\n            {VARIABLES.title}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"inputWrapper\">\r\n          <Input\r\n            className=\"input\"\r\n            onInputClick={this.handleSubmitOnEnterKey}\r\n            onInputChange={this.onInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"radioWrapper\">\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              aria-label=\"ticketNum\"\r\n              name=\"ticketNum\"\r\n              value={radioValue}\r\n              onChange={this.onRadioChange}\r\n            >\r\n              <FormControlLabel\r\n                value={VARIABLES.radio1}\r\n                control={<Radio color=\"primary\" />}\r\n                label={VARIABLES.radio1}\r\n                labelPlacement=\"end\"\r\n              />\r\n              <FormControlLabel\r\n                value={VARIABLES.radio2}\r\n                control={<Radio color=\"primary\" />}\r\n                label={VARIABLES.radio2}\r\n                labelPlacement=\"end\"\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"buttonWrapper\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Check\r\n          </Button>\r\n        </div>\r\n        <div className=\"textWrapper\">\r\n          <Typography align=\"center\" color=\"textSecondary\" variant=\"h5\">\r\n            {luckyTicketsCount ? `n: ${ticketNumLength}` : ''}\r\n          </Typography>\r\n          <Typography align=\"center\" color=\"secondary\" variant=\"h4\">\r\n            {error\r\n              ? error\r\n              : luckyTicketsCount\r\n              ? `Lucky Tickets: ${luckyTicketsCount}`\r\n              : ''}\r\n          </Typography>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LuckyTickets from './Components/LuckyTickets/LuckyTickets.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LuckyTickets />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}